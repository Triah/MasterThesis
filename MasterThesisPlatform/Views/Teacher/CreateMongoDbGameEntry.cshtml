@model MasterThesisPlatform.Models.MongoDBGame
@{
    ViewData["Title"] = "Create";
}
<h2>Create Game Details</h2>
@{
    var list = ViewData["ListOfGames"] as List<MasterThesisPlatform.Models.MongoDBGameRooms>;
    var fileContents = ViewData["ContentsOfFile"] as List<MasterThesisPlatform.Models.MongoDBScript>;

    List<string> categories = new List<string>();

    foreach (var script in fileContents)
    {
        if (!categories.Contains(script.Category))
        {
            categories.Add(script.Category);
        }
    }

}

<hr />
<div class="palette-wrapper">
    <div class="palette-categories">
        @foreach (var item in categories)
        {
            //This is an example of how to use mongoDB to dynamically create the list and operations
            //need methods for the actual code and a function that interprets the code or creates a file
            <div class="palette-category-item" onclick="showPalette('@item')">
                <p>@item</p>
            </div>
        }

    </div>
    <div class="palette-elements" id="paletteele">
    </div>
</div>

<script>
    function decodeHtml(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }
    var objectsInCategory = [];
    var buttonsForThis = [];
</script>

<script>

    console.log(@fileContents.Count);
</script>

@foreach (var obj in fileContents)
{
    if (obj.ComponentSuperName == null)
    {
        <script>
            objForList = { "Category": decodeHtml("@obj.Category"), "ComponentName": decodeHtml("@obj.ComponentName"), "ComponentContent": decodeHtml("@obj.ComponentContent") };
            objectsInCategory.push(objForList);
        </script>
    }
    else
    {
        <script>
            objForList = { "Category": decodeHtml("@obj.Category"), "ComponentName": decodeHtml("@obj.ComponentName"), "ComponentContent": decodeHtml("@obj.ComponentContent"), "ComponentSuperName": decodeHtml("@obj.ComponentSuperName") };
            objectsInCategory.push(objForList);
        </script>
    }



}

<script>
    function showPalette(category) {
        document.getElementById("paletteele").innerHTML = "";
        buttonsForThis = [];
        for (var i = 0; i < objectsInCategory.length; i++) {
            if (objectsInCategory[i].Category == category) {
                buttonsForThis.push(objectsInCategory[i]);
            }
        }
        if (buttonsForThis[0] != null) {
            for (var i = 0; i < buttonsForThis.length; i++) {
                document.getElementById("paletteele").innerHTML += "<button id="+ "buttonAddToCanvas" +">" + buttonsForThis[i].ComponentName + "</button>"
            }
        }
    console.log(buttonsForThis);
    return buttonsForThis;
    }
</script>

<hr />
<div class="building-canvas">
    <canvas id="canvas"></canvas>
</div>


<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="CreateMongoDbGameEntry">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="GameId" class="control-label"></label>
                <input asp-for="GameId" class="form-control" />
                <span asp-validation-for="GameId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Author" class="control-label"></label>
                <input asp-for="Author" class="form-control" />
                <span asp-validation-for="Author" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Components" class="control-label"></label>
                <input asp-for="Components" class="form-control" />
                <span asp-validation-for="Components" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Capacity" class="control-label"></label>
                <input asp-for="Capacity" class="form-control" />
                <span asp-validation-for="Capacity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </form>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}  